import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useState, useEffect } from 'react';
import { supabase } from '@/lib/supabase-typed';
import { useToast } from '@/hooks/use-toast';
import { Loader2 } from 'lucide-react';

interface RulesCardProps {
  eventId: string;
}

export function RulesCard({ eventId }: RulesCardProps) {
  const [content, setContent] = useState({
    rules_guidelines: '',
    guest_handbook: ''
  });
  const [loading, setLoading] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    fetchContent();
  }, [eventId]);

  const fetchContent = async () => {
    const { data } = await (supabase as any)
      .from('event_settings')
      .select('rules_guidelines, guest_handbook')
      .eq('event_id', eventId)
      .single();

    if (data) {
      setContent({
        rules_guidelines: data.rules_guidelines || '',
        guest_handbook: data.guest_handbook || ''
      });
    }
  };

  const handleGenerateRules = async () => {
    setLoading(true);
    try {
      const { data: eventData } = await (supabase as any)
        .from('events')
        .select('*')
        .eq('id', eventId)
        .single();

      const { data, error } = await supabase.functions.invoke('generate-event-rules', {
        body: { eventData }
      });

      if (error) throw error;

      setContent(prev => ({
        ...prev,
        rules_guidelines: data.rules
      }));

      toast({ title: 'Success', description: 'Rules generated by AI' });
    } catch (error) {
      toast({ title: 'Error', description: 'Failed to generate rules', variant: 'destructive' });
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateHandbook = async () => {
    setLoading(true);
    try {
      const { data: eventData } = await (supabase as any)
        .from('events')
        .select('*')
        .eq('id', eventId)
        .single();

      const { data, error } = await supabase.functions.invoke('generate-guest-handbook', {
        body: { eventData }
      });

      if (error) throw error;

      setContent(prev => ({
        ...prev,
        guest_handbook: data.handbook
      }));

      toast({ title: 'Success', description: 'Handbook generated by AI' });
    } catch (error) {
      toast({ title: 'Error', description: 'Failed to generate handbook', variant: 'destructive' });
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    try {
      const { error } = await (supabase as any).from('event_settings').upsert({
        event_id: eventId,
        ...content
      });

      if (error) throw error;

      toast({ title: 'Success', description: 'Content saved' });
    } catch (error) {
      toast({ title: 'Error', description: 'Failed to save content', variant: 'destructive' });
    }
  };

  return (
    <Dialog>
      <DialogTrigger asChild>
        <Card className="cursor-pointer hover:shadow-lg transition-shadow">
          <CardHeader>
            <CardTitle>ðŸ“– Rules & Handbook</CardTitle>
            <CardDescription>Event guidelines and guest information</CardDescription>
          </CardHeader>
        </Card>
      </DialogTrigger>
      <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Rules & Guest Handbook</DialogTitle>
        </DialogHeader>

        <Tabs defaultValue="rules">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="rules">Rules & Guidelines</TabsTrigger>
            <TabsTrigger value="handbook">Guest Handbook</TabsTrigger>
          </TabsList>

          <TabsContent value="rules" className="space-y-4">
            <div>
              <Label>Event Rules & Guidelines</Label>
              <Textarea
                value={content.rules_guidelines}
                onChange={(e) => setContent({ ...content, rules_guidelines: e.target.value })}
                rows={10}
                placeholder="Enter event rules and guidelines..."
              />
            </div>
            <Button onClick={handleGenerateRules} disabled={loading} variant="outline" className="w-full">
              {loading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
              Generate with AI
            </Button>
          </TabsContent>

          <TabsContent value="handbook" className="space-y-4">
            <div>
              <Label>Guest Handbook</Label>
              <Textarea
                value={content.guest_handbook}
                onChange={(e) => setContent({ ...content, guest_handbook: e.target.value })}
                rows={10}
                placeholder="Enter guest handbook content..."
              />
            </div>
            <Button onClick={handleGenerateHandbook} disabled={loading} variant="outline" className="w-full">
              {loading ? <Loader2 className="h-4 w-4 animate-spin mr-2" /> : null}
              Generate with AI
            </Button>
          </TabsContent>
        </Tabs>

        <Button onClick={handleSave} className="w-full">Save Content</Button>
      </DialogContent>
    </Dialog>
  );
}
